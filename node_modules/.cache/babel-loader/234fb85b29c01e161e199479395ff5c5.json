{"ast":null,"code":"var _jsxFileName = \"/Users/eric/Desktop/React Sandbox/src/context/github/GithubState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport githubContext from './githubContext';\nimport githubReducer from './githubReducer';\nimport { SEARCH_USERS, GET_USER, CLEAR_USERS, GET_REPOS, SET_LOADING } from '../types'; //set the intial states\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GithubState = props => {\n  _s();\n\n  const initialState = {\n    users: [],\n    user: {},\n    repos: [],\n    loading: false\n  }; //initialize the dispatch, this sends the state up to the reducer\n\n  const [state, dispatch] = useReducer(githubReducer, initialState); //Search Users\n\n  const searchUsers = text => {\n    setLoading();\n    fetch(`https://api.github.com/search/users?q=${text}&client_id=\n    ${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`).then(res => {\n      return res.json();\n    }).then(data => {\n      // old way with useState hook \n      // setUsers(data.items);\n      dispatch({\n        type: SEARCH_USERS,\n        payload: data.items\n      });\n    });\n  }; //Get Users\n  //Get Repos \n  //Clear Users\n\n\n  const clearUsers = () => {\n    //old way with useState hook\n    // setUsers([]);\n    dispatch({\n      type: CLEAR_USERS\n    });\n  }; //Set Loading \n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  }); //Provider makes these states & actions available to the entire app\n\n\n  return /*#__PURE__*/_jsxDEV(githubContext.Provider, {\n    value: {\n      users: state.users,\n      user: state.user,\n      repos: state.repos,\n      loading: state.loading,\n      searchUsers\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GithubState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GithubState;\nexport default GithubState;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubState\");","map":{"version":3,"sources":["/Users/eric/Desktop/React Sandbox/src/context/github/GithubState.js"],"names":["React","useReducer","githubContext","githubReducer","SEARCH_USERS","GET_USER","CLEAR_USERS","GET_REPOS","SET_LOADING","GithubState","props","initialState","users","user","repos","loading","state","dispatch","searchUsers","text","setLoading","fetch","process","env","REACT_APP_GITHUB_CLIENT_ID","REACT_APP_GITHUB_CLIENT_SECRET","then","res","json","data","type","payload","items","clearUsers","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SACIC,YADJ,EAEIC,QAFJ,EAGIC,WAHJ,EAIIC,SAJJ,EAKIC,WALJ,QAMO,UANP,C,CAQA;;;;AACA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAAA;;AACzB,QAAMC,YAAY,GAAG;AACjBC,IAAAA,KAAK,EAAE,EADU;AAEjBC,IAAAA,IAAI,EAAE,EAFW;AAGjBC,IAAAA,KAAK,EAAE,EAHU;AAIjBC,IAAAA,OAAO,EAAE;AAJQ,GAArB,CADyB,CAQ7B;;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,UAAU,CAACE,aAAD,EAAgBQ,YAAhB,CAApC,CAT6B,CAW7B;;AACA,QAAMO,WAAW,GAAIC,IAAD,IAAS;AACzBC,IAAAA,UAAU;AAEVC,IAAAA,KAAK,CAAE,yCAAwCF,IAAK;AACxD,MAAMG,OAAO,CAACC,GAAR,CAAYC,0BAA2B,kBAAiBF,OAAO,CAACC,GAAR,CAAYE,8BAA+B,EADhG,CAAL,CAECC,IAFD,CAEOC,GAAD,IAAS;AACb,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KAJD,EAKCF,IALD,CAKOG,IAAD,IAAU;AACZ;AACA;AAEAZ,MAAAA,QAAQ,CAAC;AACLa,QAAAA,IAAI,EAAE1B,YADD;AAEL2B,QAAAA,OAAO,EAAEF,IAAI,CAACG;AAFT,OAAD,CAAR;AAIH,KAbD;AAcD,GAjBH,CAZ6B,CA+B7B;AAEA;AAEA;;;AACA,QAAMC,UAAU,GAAG,MAAM;AACrB;AACA;AAEAhB,IAAAA,QAAQ,CAAC;AAACa,MAAAA,IAAI,EAAExB;AAAP,KAAD,CAAR;AACD,GALH,CApC6B,CA2C7B;;;AACA,QAAMc,UAAU,GAAG,MAAMH,QAAQ,CAAC;AAAEa,IAAAA,IAAI,EAAEtB;AAAR,GAAD,CAAjC,CA5C6B,CA8C7B;;;AACA,sBAAQ,QAAC,aAAD,CAAe,QAAf;AACR,IAAA,KAAK,EAAE;AACHI,MAAAA,KAAK,EAAEI,KAAK,CAACJ,KADV;AAEHC,MAAAA,IAAI,EAAEG,KAAK,CAACH,IAFT;AAGHC,MAAAA,KAAK,EAAEE,KAAK,CAACF,KAHV;AAIHC,MAAAA,OAAO,EAAEC,KAAK,CAACD,OAJZ;AAKHG,MAAAA;AALG,KADC;AAAA,cASPR,KAAK,CAACwB;AATC;AAAA;AAAA;AAAA;AAAA,UAAR;AAcC,CA7DD;;GAAMzB,W;;KAAAA,W;AA+DN,eAAeA,WAAf","sourcesContent":["import React, {useReducer} from 'react';\nimport githubContext from './githubContext';\nimport githubReducer from './githubReducer';\nimport {\n    SEARCH_USERS,\n    GET_USER,\n    CLEAR_USERS,\n    GET_REPOS,\n    SET_LOADING,\n} from '../types';\n\n//set the intial states\nconst GithubState = props => {\n    const initialState = {\n        users: [],\n        user: {},\n        repos: [],\n        loading: false,\n    }\n\n//initialize the dispatch, this sends the state up to the reducer\nconst [state, dispatch] = useReducer(githubReducer, initialState);\n\n//Search Users\nconst searchUsers = (text) =>{\n    setLoading();\n    \n    fetch(`https://api.github.com/search/users?q=${text}&client_id=\n    ${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`)\n    .then((res) => {\n      return res.json();\n    })\n    .then((data) => {\n        // old way with useState hook \n        // setUsers(data.items);\n\n        dispatch({ \n            type: SEARCH_USERS,\n            payload: data.items\n        })\n    });\n  }\n\n//Get Users\n\n//Get Repos \n\n//Clear Users\nconst clearUsers = () => {\n    //old way with useState hook\n    // setUsers([]);\n    \n    dispatch({type: CLEAR_USERS})\n  }\n\n//Set Loading \nconst setLoading = () => dispatch({ type: SET_LOADING });\n\n//Provider makes these states & actions available to the entire app\nreturn (<githubContext.Provider\nvalue={{\n    users: state.users,\n    user: state.user,\n    repos: state.repos,\n    loading: state.loading,\n    searchUsers\n}}\n>\n{props.children}\n\n</githubContext.Provider>\n);\n\n}\n\nexport default GithubState;"]},"metadata":{},"sourceType":"module"}