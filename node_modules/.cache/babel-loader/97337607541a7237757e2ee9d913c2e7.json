{"ast":null,"code":"var _jsxFileName = \"/Users/eric/Desktop/React Sandbox/src/context/github/GithubState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport githubContext from './githubContext';\nimport githubReducer from './githubReducer';\nimport { SEARCH_USERS, GET_USER, CLEAR_USERS, GET_REPOS, SET_LOADING } from '../types';\nimport { PROPERTY_TYPES } from '@babel/types'; //set the intial states\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GithubState = props => {\n  _s();\n\n  const initialState = {\n    users: [],\n    user: {},\n    repos: [],\n    loading: false\n  }; //dispatch the type back to the reducer \n\n  const [state, dispatch] = useReducer(githubReducer, initialState); //Search User\n  //Get User\n  //Get Repos \n  //Clear Users\n  //Set Loading \n  //Provider makes these available to the entire app\n\n  return /*#__PURE__*/_jsxDEV(githubContext.Provider, {\n    value: {\n      users: state.users,\n      user: state.user,\n      repos: state.repos,\n      loading: state.loading\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GithubState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GithubState;\nexport default GethubState;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubState\");","map":{"version":3,"sources":["/Users/eric/Desktop/React Sandbox/src/context/github/GithubState.js"],"names":["React","useReducer","githubContext","githubReducer","SEARCH_USERS","GET_USER","CLEAR_USERS","GET_REPOS","SET_LOADING","PROPERTY_TYPES","GithubState","props","initialState","users","user","repos","loading","state","dispatch","children","GethubState"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SACIC,YADJ,EAEIC,QAFJ,EAGIC,WAHJ,EAIIC,SAJJ,EAKIC,WALJ,QAMO,UANP;AAOA,SAASC,cAAT,QAA+B,cAA/B,C,CAEA;;;;AACA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAAA;;AACzB,QAAMC,YAAY,GAAG;AACjBC,IAAAA,KAAK,EAAE,EADU;AAEjBC,IAAAA,IAAI,EAAE,EAFW;AAGjBC,IAAAA,KAAK,EAAE,EAHU;AAIjBC,IAAAA,OAAO,EAAE;AAJQ,GAArB,CADyB,CAQzB;;AACJ,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,UAAU,CAACE,aAAD,EAAgBS,YAAhB,CAApC,CAT6B,CAW7B;AAEA;AAEA;AAEA;AAEA;AAEA;;AACA,sBAAQ,QAAC,aAAD,CAAe,QAAf;AACR,IAAA,KAAK,EAAE;AACHC,MAAAA,KAAK,EAAEI,KAAK,CAACJ,KADV;AAEHC,MAAAA,IAAI,EAAEG,KAAK,CAACH,IAFT;AAGHC,MAAAA,KAAK,EAAEE,KAAK,CAACF,KAHV;AAIHC,MAAAA,OAAO,EAAEC,KAAK,CAACD;AAJZ,KADC;AAAA,cAQPL,KAAK,CAACQ;AARC;AAAA;AAAA;AAAA;AAAA,UAAR;AAaC,CAnCD;;GAAMT,W;;KAAAA,W;AAqCN,eAAeU,WAAf","sourcesContent":["import React, {useReducer} from 'react';\nimport githubContext from './githubContext';\nimport githubReducer from './githubReducer';\nimport {\n    SEARCH_USERS,\n    GET_USER,\n    CLEAR_USERS,\n    GET_REPOS,\n    SET_LOADING,\n} from '../types';\nimport { PROPERTY_TYPES } from '@babel/types';\n\n//set the intial states\nconst GithubState = props => {\n    const initialState = {\n        users: [],\n        user: {},\n        repos: [],\n        loading: false,\n    }\n\n    //dispatch the type back to the reducer \nconst [state, dispatch] = useReducer(githubReducer, initialState);\n\n//Search User\n\n//Get User\n\n//Get Repos \n\n//Clear Users\n\n//Set Loading \n\n//Provider makes these available to the entire app\nreturn (<githubContext.Provider\nvalue={{\n    users: state.users,\n    user: state.user,\n    repos: state.repos,\n    loading: state.loading\n}}\n>\n{props.children}\n\n</githubContext.Provider>\n);\n\n}\n\nexport default GethubState;"]},"metadata":{},"sourceType":"module"}